{"version":3,"file":"static/js/525.71635ea4.chunk.js","mappings":"iMACA,EAAuB,0BAAvB,EAAiE,mCAAjE,EAA6G,4BAA7G,EAAgN,iCAAhN,EAA6P,+BAA7P,EAA0S,iC,wCCkB/RA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,E,qECiIpB,EArIoB,WAClB,IAAMG,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACtBC,GAAeC,EAAAA,EAAAA,KAAfD,WACFE,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAcxB,IACdyB,EAAgBzB,IAEhB0B,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,cAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHC,EAAQQ,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MAEF,QACEC,QAAQC,IAAI,eAGjB,EAEKC,EAAQ,WACZX,EAAQ,IACRE,EAAU,GACX,EA0BKU,EAAgBpB,GACpB,SAAC,KAAD,CACEqB,YAAY,QACZC,YAAY,IACZC,kBAAkB,OAClBC,SAAS,EACTC,MAAM,OACNC,OAAO,UAGT,SAAC,MAAD,CAAeC,UAAU,kBAG3B,OACE,kBAAMC,SAtCc,SAAAd,GACpBA,EAAEe,iBAEF,IAAMC,EAAU,CACdvB,KAAAA,EACAE,OAAAA,GAOF,GAJuBZ,EAASkC,MAC9B,SAAAf,GAAK,OAAIA,EAAMT,KAAKyB,gBAAkBF,EAAQvB,KAAKyB,aAA9C,IAOL,OAHAC,EAAAA,GAAAA,MAAA,UAAe1B,EAAf,iCACAY,IAIAf,GAAS8B,EAAAA,EAAAA,IAAWJ,IACpBG,EAAAA,GAAAA,QAAA,UAAiB1B,EAAjB,4BAEFY,GACD,EAgBgCQ,UAAWQ,EAA1C,WACE,eAAIR,UAAU,QAAd,SAAsB,eACtB,iBAAKA,UAAWQ,EAAhB,WACE,mBAAOC,QAASzB,EAAagB,UAAWQ,EAAxC,WACE,cAAGR,UAAU,OAAb,SAAoB,UACpB,kBACElC,GAAIkB,EACJ0B,KAAK,OACL9B,KAAK,OACL+B,QAAQ,yHACRC,MAAM,yIACNvB,MAAOT,EACPiC,SAAU3B,EACV4B,UAAQ,QAGZ,mBACEL,QAASxB,EACTe,WAAWe,EAAAA,EAAAA,GAAKP,EAAYA,GAF9B,WAIE,cAAGR,UAAU,OAAb,SAAoB,YACpB,kBACElC,GAAImB,EACJyB,KAAK,MACL9B,KAAK,SACL+B,QAAQ,yFACRC,MAAM,+FACNvB,MAAOP,EACP+B,SAAU3B,EACV4B,UAAQ,QAGZ,mBACEJ,KAAK,SACLV,WAAWe,EAAAA,EAAAA,GACT,mDACAP,GAEFQ,UAAWzC,EANb,SAQGkB,KAGDlB,IACA,eAAGyB,UAAU,UAAb,UACG,IAAI,SACE,KACP,SAAC,KAAD,CAAMiB,GAAG,SAASjB,UAAWQ,EAA7B,SAA8C,WAEtC,IAAI,KACT,KACH,SAAC,KAAD,CAAMS,GAAG,YAAYjB,UAAWQ,EAAhC,SAAiD,WAEzC,IAAI,qBAOvB,EChJc,SAASU,IACtB,OACE,0BACE,SAAC,EAAD,KAGL,C,wGCRM,IAAM9C,EAAc,SAAA+C,GAAK,OAAIA,EAAMjD,SAASkD,KAAnB,EAEnB9C,EAAe,SAAA6C,GAAK,OAAIA,EAAMjD,SAASG,SAAnB,EAEpBgD,EAAW,SAAAF,GAAK,OAAIA,EAAMjD,SAASoD,KAAnB,C","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/Home.js","redux/contacts/contactsSelector.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"inputswrapper\":\"ContactForm_inputswrapper__pm3gn\",\"inputs\":\"ContactForm_inputs__x3RUg\",\"slide-fwd-bottom\":\"ContactForm_slide-fwd-bottom__Dw2Ky\",\"numberinput\":\"ContactForm_numberinput__o4ZAh\",\"buttonadd\":\"ContactForm_buttonadd__PAcDc\",\"messagelink\":\"ContactForm_messagelink__lvXvu\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import css from './ContactForm.module.css';\nimport clsx from 'clsx';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { AiOutlinePlus } from 'react-icons/ai';\n\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts, getIsLoading } from 'redux/contacts/contactsSelector';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from 'hooks';\nimport { toast } from 'react-hot-toast';\n\nconst ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n  const { isLoggedIn } = useAuth();\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.log('cannot find');\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const onSubmitClick = e => {\n    e.preventDefault();\n\n    const contact = {\n      name,\n      number,\n    };\n\n    const isNameIncluded = contacts.some(\n      value => value.name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (isNameIncluded) {\n      toast.error(`${name} is already in contacts`);\n      reset();\n\n      return;\n    } else {\n      dispatch(addContact(contact));\n      toast.success(`${name} was successfully added`);\n    }\n    reset();\n  };\n\n  const buttonContent = isLoading ? (\n    <RotatingLines\n      strokeColor=\"white\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      visible={true}\n      width=\"24px\"\n      height=\"24px\"\n    />\n  ) : (\n    <AiOutlinePlus className=\"iconforbutton\" />\n  );\n\n  return (\n    <form onSubmit={onSubmitClick} className={css.form}>\n      <h1 className=\"title\">Phonebook</h1>\n      <div className={css.inputswrapper}>\n        <label htmlFor={nameInputId} className={css.inputs}>\n          <p className=\"text\">Name</p>\n          <input\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            value={name}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <label\n          htmlFor={numberInputId}\n          className={clsx(css.inputs, css.numberinput)}\n        >\n          <p className=\"text\">Number</p>\n          <input\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            value={number}\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className={clsx(\n            'button-common button-main scaleincenteranimation',\n            css.buttonadd\n          )}\n          disabled={!isLoggedIn ? true : false}\n        >\n          {buttonContent}\n        </button>\n\n        {!isLoggedIn && (\n          <p className=\"message\">\n            {' '}\n            Please{' '}\n            <Link to=\"/login\" className={css.messagelink}>\n              Log In\n            </Link>{' '}\n            or{' '}\n            <Link to=\"/register\" className={css.messagelink}>\n              Create\n            </Link>{' '}\n            an account\n          </p>\n        )}\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/ContactForm';\n\nexport default function Home() {\n  return (\n    <div>\n      <ContactForm />\n    </div>\n  );\n}\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","contacts","useSelector","getContacts","isLoading","getIsLoading","isLoggedIn","useAuth","dispatch","useDispatch","useState","name","setName","number","setNumber","nameInputId","numberInputId","handleChange","e","currentTarget","value","console","log","reset","buttonContent","strokeColor","strokeWidth","animationDuration","visible","width","height","className","onSubmit","preventDefault","contact","some","toLowerCase","toast","addContact","css","htmlFor","type","pattern","title","onChange","required","clsx","disabled","to","Home","state","items","getError","error"],"sourceRoot":""}